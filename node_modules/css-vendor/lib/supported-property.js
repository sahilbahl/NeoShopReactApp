'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = supportedProperty;

var _isInBrowser = require('is-in-browser');

var _isInBrowser2 = _interopRequireDefault(_isInBrowser);

var _plugins = require('./plugins');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var el = void 0;
var cache = {};
if (_isInBrowser2['default']) {
  el = document.createElement('p');

  /**
   * We test every property on vendor prefix requirement.
   * Once tested, result is cached. It gives us up to 70% perf boost.
   * http://jsperf.com/element-style-object-access-vs-plain-object
   *
   * Prefill cache with known css properties to reduce amount of
   * properties we need to feature test at runtime.
   * http://davidwalsh.name/vendor-prefix
   */
  var computed = window.getComputedStyle(document.documentElement, '');
  for (var key in computed) {
    // eslint-disable-next-line no-restricted-globals
    if (!isNaN(key)) cache[computed[key]] = computed[key];
  }

  // Properties that cannot be correctly detected using the
  // cache prefill method.
  _plugins.noPrefill.forEach(function (x) {
    return delete cache[x];
  });
}

/**
 * Test if a property is supported, returns supported property with vendor
 * prefix if required. Returns `false` if not supported.
 *
 * @param {String} prop dash separated
 * @param {Object} [options]
 * @return {String|Boolean}
 * @api public
 */

function supportedProperty(prop) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // For server-side rendering.
  if (!el) return prop;

  // We have not tested this prop yet, lets do the test.
  if (process.env.NODE_ENV !== 'benchmark' && cache[prop] != null) {
    return cache[prop];
  }

  if (prop === 'transition' || prop === 'transform') {
    options[prop] = prop in el.style;
  }

  for (var i = 0; i < _plugins.propertyDetectors.length; i++) {
    cache[prop] = _plugins.propertyDetectors[i](prop, el.style, options);
    if (cache[prop]) break;
  }

  // Firefox can even throw an error for invalid properties, e.g. "0"
  try {
    el.style[prop] = '';
  } catch (err) {
    return false;
  }

  return cache[prop];
}